# ==============================================================================
# 1. IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL DA P√ÅGINA
# ==============================================================================
import streamlit as st
import os
from PIL import Image

# Demais importa√ß√µes que usaremos futuramente
# import io
# import pyrebase
# import base64
# import time
# import datetime
# import firebase_admin
# import pandas as pd
# from docx import Document
# from fpdf import FPDF
# from langchain_google_genai import ChatGoogleGenerativeAI
# from firebase_admin import credentials, firestore as firebase_admin_firestore
# import plotly.graph_objects as go

# Importa as fun√ß√µes que centralizamos no nosso arquivo de utilidades
from utils import get_asset_path, carregar_prompts_config

# --- CONFIGURA√á√ÉO DA P√ÅGINA (STREAMLIT) ---
try:
    # Usa a fun√ß√£o importada de utils.py para encontrar o caminho do √≠cone
    page_icon_path = get_asset_path("carinha_max_marketing_total.png") # Lembre-se de usar o nome do seu novo logo
    page_icon_obj = Image.open(page_icon_path) if os.path.exists(page_icon_path) else "üöÄ"
except Exception as e:
    st.error(f"Erro ao carregar o √≠cone da p√°gina: {e}")
    page_icon_obj = "üöÄ"

# Define as configura√ß√µes da p√°gina com a marca do novo produto
st.set_page_config(
    page_title="MaxMarketing Total",
    page_icon=page_icon_obj,
    layout="wide",
    initial_sidebar_state="collapsed"
)
# --- FIM DA CONFIGURA√á√ÉO INICIAL ---

st.success("Configura√ß√£o inicial do App carregada com sucesso!")

# ==============================================================================
# 2. CONSTANTES E CARREGAMENTO DE SECRETS
# ==============================================================================

# --- Constantes do Projeto ---
# Sugest√£o: Usar um prefixo que identifique o app atual.
APP_NAME = "MaxMarketing Total"
APP_KEY_SUFFIX = "mmt_app_v1.0" # MMT = MaxMarketing Total
USER_COLLECTION = "users" # Nome da cole√ß√£o para os usu√°rios no Firestore
COMPANY_COLLECTION = "companies" # Nome da cole√ß√£o para os dados das empresas dos usu√°rios
SALES_PAGE_URL = "https://sua-pagina-de-vendas.com.br" # IMPORTANTE: Substituir pela URL real de vendas

# --- Configura√ß√£o de Ambiente ---
# Evita avisos de paralelismo de algumas bibliotecas de IA.
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# --- Carregamento de Chaves e Configura√ß√µes (Secrets) ---
# O Streamlit carrega o arquivo secrets.toml automaticamente para este objeto.
# Adicionamos verifica√ß√µes para garantir que as chaves essenciais est√£o presentes.

try:
    # Carrega a chave da API do Google AI (Gemini)
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]

    # Carrega o objeto de configura√ß√£o do Firebase
    FIREBASE_CONFIG = st.secrets["firebase_config"]
    
    # Carrega o objeto da conta de servi√ßo do Google Cloud
    GCP_SERVICE_ACCOUNT = st.secrets["gcp_service_account"]

except KeyError as e:
    st.error(f"Erro Cr√≠tico: A chave '{e}' n√£o foi encontrada no arquivo secrets.toml.")
    st.info("Por favor, verifique se o arquivo .streamlit/secrets.toml est√° completo e correto.")
    st.stop() # Interrompe a execu√ß√£o do app se uma chave essencial estiver faltando

st.success("Constantes e secrets carregados com sucesso!")
# ==============================================================================
# 3. FUN√á√ïES AUXILIARES GLOBAIS
# ==============================================================================

# Adicionado o st.cache_data para otimizar o carregamento da imagem.
# O Streamlit guardar√° o resultado em cache e n√£o precisar√° reler o arquivo do disco toda vez.
@st.cache_data
def convert_image_to_base64(image_name):
    """L√™ um arquivo de imagem e o converte para uma string Base64."""
    try:
        image_path = get_asset_path(image_name)
        if os.path.exists(image_path):
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode()
        else:
            # Mostra um aviso no app se a imagem n√£o for encontrada.
            st.warning(f"Arquivo de imagem n√£o encontrado: {image_path}")
            return None
    except Exception as e:
        # Mostra um erro no app se ocorrer outro problema.
        st.error(f"Erro ao converter a imagem '{image_name}': {e}")
        return None

st.success("Fun√ß√µes auxiliares carregadas com sucesso!")
# ==============================================================================
# 4. INICIALIZA√á√ÉO DE SERVI√áOS E AUTENTICA√á√ÉO
# ==============================================================================

@st.cache_resource
def initialize_firebase_services():
    """
    Inicializa e retorna os clientes do Firebase para autentica√ß√£o e banco de dados.
    Usa @st.cache_resource para garantir que a conex√£o seja estabelecida apenas uma vez.
    """
    try:
        # Carrega as credenciais do arquivo secrets.toml
        firebase_config = dict(st.secrets["firebase_config"])
        service_account_creds = dict(st.secrets["gcp_service_account"])

        # Inicializa o Pyrebase para autentica√ß√£o do lado do cliente (login, registro)
        firebase_client = pyrebase.initialize_app(firebase_config)
        pb_auth_client = firebase_client.auth()

        # Inicializa o Firebase Admin SDK para opera√ß√µes de backend (acesso ao Firestore)
        # A verifica√ß√£o "if not firebase_admin._apps" impede a reinicializa√ß√£o do app.
        if not firebase_admin._apps:
            cred = credentials.Certificate(service_account_creds)
            firebase_admin.initialize_app(cred)
        
        firestore_db_client = firebase_admin_firestore.client()
        
        return pb_auth_client, firestore_db_client

    except Exception as e:
        st.error(f"Erro cr√≠tico na inicializa√ß√£o do Firebase: {e}")
        st.info("Verifique se as se√ß√µes [firebase_config] e [gcp_service_account] est√£o corretas no seu arquivo secrets.toml.")
        st.stop()
        return None, None

# Inicializa os servi√ßos e os armazena em vari√°veis globais
pb_auth_client, firestore_db = initialize_firebase_services()

@st.cache_resource
def get_llm():
    """Inicializa e retorna o cliente do modelo de linguagem (Gemini)."""
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
        # Configura o LLM com a chave e uma temperatura para respostas criativas
        return ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.75)
    except Exception as e:
        st.error(f"Erro cr√≠tico ao inicializar a IA do Google: {e}")
        st.info("Verifique se a GOOGLE_API_KEY est√° correta no seu arquivo secrets.toml.")
        st.stop()
        return None

# Inicializa o LLM
llm = get_llm()

def get_current_user_status():
    """
    Verifica se existe uma sess√£o de usu√°rio v√°lida e atualiza o estado do aplicativo.
    Retorna o status de autentica√ß√£o e as informa√ß√µes b√°sicas do usu√°rio.
    """
    # Define uma chave √∫nica para os dados da sess√£o do usu√°rio
    session_key = f'{APP_KEY_SUFFIX}_user_session_data'
    
    # Verifica se os dados da sess√£o existem
    if 'user_session' in st.session_state and st.session_state.user_session:
        try:
            # Tenta usar o token da sess√£o para obter informa√ß√µes da conta.
            # Isso valida se o token ainda √© v√°lido.
            user_info = pb_auth_client.get_account_info(st.session_state.user_session['idToken'])
            
            # Se for bem-sucedido, extrai os dados do usu√°rio
            uid = user_info['users'][0]['localId']
            email = user_info['users'][0].get('email')
            
            # Atualiza o estado da sess√£o com os dados confirmados
            st.session_state.update({
                'user_is_authenticated': True,
                'user_uid': uid,
                'user_email': email
            })
            return True, uid, email
            
        except Exception:
            # Se o token for inv√°lido/expirado, limpa a sess√£o e desloga o usu√°rio.
            st.session_state.clear()
            return False, None, None
            
    return False, None, None

st.success("Servi√ßos de autentica√ß√£o e IA carregados com sucesso!")
# ==============================================================================
# 5. CLASSE PRINCIPAL DA APLICA√á√ÉO
# ==============================================================================
class MaxMarketingApp:
    def __init__(self, llm_instance, db_firestore_instance):
        """Inicializa a aplica√ß√£o com as conex√µes para a IA e o Banco de Dados."""
        self.llm = llm_instance
        self.db = db_firestore_instance

    # --- M√âTODO DE ONBOARDING E BRIEFING ESTRAT√âGICO ---
    def exibir_briefing_estrategico(self):
        """
        Exibe um formul√°rio para o usu√°rio preencher o DNA de marketing da sua empresa.
        Essas informa√ß√µes ser√£o o "prompt invertido" principal para todas as ferramentas.
        """
        st.header("üöÄ Briefing Estrat√©gico do MaxMarketing Total")
        st.markdown("Para que nossa IA crie campanhas e conte√∫dos que realmente vendem, precisamos entender a fundo o seu neg√≥cio. Suas respostas aqui servir√£o como base para todas as cria√ß√µes futuras.")
        
        # Vamos usar um dicion√°rio no session_state para guardar os dados do form
        if 'briefing_data' not in st.session_state:
            st.session_state.briefing_data = {}

        with st.form(key="briefing_form"):
            st.subheader("1. Identidade da Empresa")
            st.session_state.briefing_data['company_name'] = st.text_input("Nome da Empresa:", placeholder="Ex: Sapataria do Z√©")
            st.session_state.briefing_data['pitch'] = st.text_area("Descreva seu neg√≥cio em uma frase (seu pitch):", placeholder="Ex: Vendemos sapatos de couro artesanais para o p√∫blico masculino em Juiz de Fora.")
            st.session_state.briefing_data['personalidade'] = st.radio("Qual adjetivo melhor descreve a personalidade da sua marca?",
                                                                        ('Divertida e Jovem', 'S√©ria e Corporativa', 'Acolhedora e Amig√°vel', 'Sofisticada e Premium', 'T√©cnica e Especialista'))

            st.subheader("2. Produtos & Proposta de Valor")
            st.session_state.briefing_data['produtos'] = st.text_area("Liste seus 3 principais produtos ou servi√ßos:")
            st.session_state.briefing_data['diferencial'] = st.text_input("Qual √© o seu principal diferencial competitivo?", placeholder="Ex: Entrega mais r√°pida da cidade, √∫nico com garantia de 2 anos...")

            st.subheader("3. O Cliente Ideal (P√∫blico-Alvo)")
            st.session_state.briefing_data['cliente_ideal'] = st.text_area("Descreva seu cliente ideal:", placeholder="Homens de 30-50 anos, que valorizam qualidade e durabilidade...")
            st.session_state.briefing_data['dor_cliente'] = st.text_input("Qual a principal 'dor' ou necessidade do seu cliente que sua empresa resolve?")

            st.subheader("4. Objetivos de Marketing")
            st.session_state.briefing_data['objetivo_principal'] = st.radio("Qual √© o seu OBJETIVO N¬∫ 1 com marketing digital?",
                                                                            ('Aumentar seguidores e engajamento', 'Gerar mais leads (contatos)', 'Aumentar as vendas diretas', 'Fortalecer a marca'))

            submitted = st.form_submit_button("‚úÖ Salvar Briefing e Come√ßar a Criar!")
            if submitted:
                with st.spinner("Salvando o DNA de marketing da sua empresa..."):
                    try:
                        user_uid = st.session_state.get('user_uid')
                        if user_uid:
                            # Cria ou atualiza um documento com o ID da empresa do usu√°rio
                            company_ref = self.db.collection(COMPANY_COLLECTION).document(user_uid)
                            company_ref.set(st.session_state.briefing_data, merge=True) # merge=True permite atualizar sem apagar dados antigos
                            
                            # Marca no perfil do usu√°rio que o briefing foi conclu√≠do
                            user_ref = self.db.collection(USER_COLLECTION).document(user_uid)
                            user_ref.update({"briefing_completed": True})

                            st.success("Briefing salvo! Estamos prontos para decolar.")
                            time.sleep(2)
                            # Limpa os dados do formul√°rio da mem√≥ria da sess√£o
                            del st.session_state['briefing_data']
                            st.rerun()
                        else:
                            st.error("Erro: Usu√°rio n√£o autenticado. N√£o foi poss√≠vel salvar o briefing.")
                    except Exception as e:
                        st.error(f"Ocorreu um erro ao salvar o briefing: {e}")

    # --- PLACEHOLDERS PARA AS FUNCIONALIDADES ---
    
    # ==============================================================================
    # 6. FUNCIONALIDADES DO APP
    # ==============================================================================

    def exibir_criador_de_posts(self):
        """
        P√°gina para criar posts individuais para diversas plataformas.
        Implementa o conceito de "prompt invertido" para coletar detalhes do post.
        """
        st.header("‚úçÔ∏è Criador de Posts")
        st.markdown("Preencha o briefing abaixo para que o Max crie o post perfeito para voc√™.")

        # Carrega os prompts do nosso arquivo de configura√ß√£o JSON
        prompts = carregar_prompts_config()
        if not prompts:
            st.error("N√£o foi poss√≠vel carregar as configura√ß√µes de prompt.")
            return

        # Define as op√ß√µes de canais/plataformas
        canais_disponiveis = [
            'Instagram', 'Facebook', 'Google Ads (Pesquisa)', 
            'YouTube (Shorts)', 'TikTok', 'LinkedIn', 'Marketplace (OLX, etc.)'
        ]

        # Inicia o formul√°rio para evitar que a p√°gina recarregue a cada sele√ß√£o
        with st.form(key="post_briefing_form"):
            st.subheader("1. Defini√ß√µes do Post")
            
            # Sele√ß√£o de canal e tipo de post
            canal_selecionado = st.selectbox("Para qual canal √© este post?", options=canais_disponiveis)
            
            tipo_post = ""
            if canal_selecionado in ['Instagram', 'Facebook']:
                tipo_post = st.radio("Qual o formato?", ['Post de Feed (Imagem/Carrossel)', 'Reels', 'Stories'], horizontal=True)
            
            st.subheader("2. Conte√∫do e Objetivo (Prompt Invertido)")
            
            objetivo_post = st.text_input(
                "Qual o objetivo principal DESTE post?", 
                placeholder="Ex: Anunciar uma promo√ß√£o, gerar cliques no site, aumentar engajamento..."
            )
            produto_servico_foco = st.text_input(
                "Qual produto ou servi√ßo espec√≠fico voc√™ quer promover?",
                help="Seja espec√≠fico! Ex: 'Sapato de couro modelo Verona, cor marrom'."
            )
            mensagem_central = st.text_area(
                "Qual √© a mensagem central que voc√™ quer comunicar?",
                placeholder="Ex: Nossa promo√ß√£o de Dia dos Pais est√° com 50% de desconto em todos os sapatos."
            )
            cta_especifica = st.text_input(
                "Qual a Chamada para A√ß√£o (CTA)?",
                placeholder="Ex: 'Clique no link da bio', 'Comente EU QUERO', 'Visite nossa loja na Rua X'."
            )

            # Bot√£o para enviar o formul√°rio e gerar o conte√∫do
            submitted = st.form_submit_button("‚ú® Gerar Post com Max IA")

        # --- L√≥gica de Gera√ß√£o e Exibi√ß√£o do Resultado ---
        if submitted:
            with st.spinner("Aguarde... Max est√° combinando sua estrat√©gia com criatividade para gerar o post ideal! üöÄ"):
                try:
                    # Passo 1: Buscar o briefing geral da empresa que salvamos no Firestore
                    # (Vamos criar essa fun√ß√£o de busca depois, por enquanto √© um placeholder)
                    # company_data = buscar_dados_empresa_do_firestore(self.db, st.session_state.get('user_uid'))
                    
                    # Passo 2: Montar o prompt final para a IA
                    # (Aqui combinamos o briefing da empresa com o briefing espec√≠fico deste post)
                    # prompt_final = montar_prompt_para_post(
                    #     prompts, company_data, canal_selecionado, tipo_post, 
                    #     objetivo_post, produto_servico_foco, mensagem_central, cta_especifica
                    # )
                    
                    # Passo 3: Chamar a IA para gerar o conte√∫do
                    # (Usamos o 'llm' que inicializamos na Parte 4)
                    # resultado_ia = self.llm.invoke(prompt_final)
                    
                    # --- SIMULA√á√ÉO DO RESULTADO (para fins de desenvolvimento visual) ---
                    st.session_state['post_gerado'] = """
**T√≠tulo Impactante:** üëû Seu Pai Merece o Melhor. E o Melhor Est√° com 50% OFF!

**Texto do Post:**
O presente perfeito para o Dia dos Pais est√° aqui na Sapataria do Z√©! üéÅ

Toda a nossa linha de sapatos de couro artesanais, incluindo o nosso campe√£o de vendas Verona, est√° com um desconto incr√≠vel de 50%. Qualidade, conforto e durabilidade que seu pai vai sentir a cada passo.

N√£o deixe para a √∫ltima hora! A promo√ß√£o √© v√°lida somente at√© s√°bado.

**Sugest√£o de Imagem/V√≠deo:**
Um v√≠deo curto e elegante mostrando os detalhes do sapato de couro Verona, com foco na costura e no acabamento. O v√≠deo termina com o sapato sendo colocado em uma bela caixa de presente.

**Chamada para A√ß√£o (CTA):**
Visite nossa loja na Rua X e garanta o presente do seu paiz√£o!

**Hashtags Estrat√©gicas:**
#diadospais #presenteparaopai #sapatomasculino #sapatodecouro #juizdefora #promocao #modamasculina
                    """
                    # --- FIM DA SIMULA√á√ÉO ---

                except Exception as e:
                    st.error(f"Ocorreu um erro ao gerar o conte√∫do: {e}")

        # Se um post foi gerado, exibe na tela
        if 'post_gerado' in st.session_state and st.session_state.post_gerado:
            st.divider()
            st.subheader("‚úÖ Conte√∫do Gerado pelo Max:")
            st.markdown(st.session_state.post_gerado)

            st.subheader("Refinamento e A√ß√µes")
            col1, col2 = st.columns(2)
            with col1:
                st.button("Salvar no Hist√≥rico", type="primary")
            with col2:
                st.download_button("Baixar como .txt", st.session_state.post_gerado, file_name="post_max_marketing.txt")
            
            refinamento = st.text_input("Gostou? Pe√ßa um ajuste para o Max:", placeholder="Ex: 'Deixe o texto mais curto', 'Use mais emojis', 'Crie outra op√ß√£o de t√≠tulo'")
            if st.button("Refinar Texto"):
                # Aqui entraria a l√≥gica para refinar o texto, enviando um novo prompt para a IA
                st.info("Fun√ß√£o de refinamento em desenvolvimento.")

    def exibir_criador_de_campanhas(self):
        """P√°gina para criar campanhas completas com m√∫ltiplos criativos."""
        st.header("üì£ Criador de Campanhas")
        st.info("Funcionalidade em desenvolvimento. Crie campanhas integradas para atingir seus objetivos.")
        pass

    def exibir_construtor_de_ofertas(self): # <<< NOVO PLACEHOLDER ADICIONADO
        """P√°gina para criar um cat√°logo de ofertas/produtos."""
        st.header("üõçÔ∏è Construtor de Ofertas")
        st.info("Funcionalidade em desenvolvimento. Crie seu cat√°logo de produtos e ofertas para compartilhar.")
        pass

    def exibir_estrategista_de_midia(self):
        """P√°gina com ferramentas de GEO e otimiza√ß√£o de an√∫ncios."""
        st.header("üìä Estrategista de M√≠dia Digital")
        st.info("Funcionalidade em desenvolvimento. Otimize sua presen√ßa com GEO e planeje seus an√∫ncios.")
        pass
