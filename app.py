# ==============================================================================
# 1. IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL DA P√ÅGINA
# ==============================================================================
import streamlit as st
import os
from PIL import Image

# Demais importa√ß√µes que usaremos futuramente
# import io
# import pyrebase
# import base64
# import time
# import datetime
# import firebase_admin
# import pandas as pd
# from docx import Document
# from fpdf import FPDF
# from langchain_google_genai import ChatGoogleGenerativeAI
# from firebase_admin import credentials, firestore as firebase_admin_firestore
# import plotly.graph_objects as go

# Importa as fun√ß√µes que centralizamos no nosso arquivo de utilidades
from utils import get_asset_path, carregar_prompts_config

# --- CONFIGURA√á√ÉO DA P√ÅGINA (STREAMLIT) ---
try:
    # Usa a fun√ß√£o importada de utils.py para encontrar o caminho do √≠cone
    page_icon_path = get_asset_path("carinha_max_marketing_total.png") # Lembre-se de usar o nome do seu novo logo
    page_icon_obj = Image.open(page_icon_path) if os.path.exists(page_icon_path) else "üöÄ"
except Exception as e:
    st.error(f"Erro ao carregar o √≠cone da p√°gina: {e}")
    page_icon_obj = "üöÄ"

# Define as configura√ß√µes da p√°gina com a marca do novo produto
st.set_page_config(
    page_title="MaxMarketing Total",
    page_icon=page_icon_obj,
    layout="wide",
    initial_sidebar_state="collapsed"
)
# --- FIM DA CONFIGURA√á√ÉO INICIAL ---

st.success("Configura√ß√£o inicial do App carregada com sucesso!")

# ==============================================================================
# 2. CONSTANTES E CARREGAMENTO DE SECRETS
# ==============================================================================

# --- Constantes do Projeto ---
# Sugest√£o: Usar um prefixo que identifique o app atual.
APP_NAME = "MaxMarketing Total"
APP_KEY_SUFFIX = "mmt_app_v1.0" # MMT = MaxMarketing Total
USER_COLLECTION = "users" # Nome da cole√ß√£o para os usu√°rios no Firestore
COMPANY_COLLECTION = "companies" # Nome da cole√ß√£o para os dados das empresas dos usu√°rios
SALES_PAGE_URL = "https://sua-pagina-de-vendas.com.br" # IMPORTANTE: Substituir pela URL real de vendas

# --- Configura√ß√£o de Ambiente ---
# Evita avisos de paralelismo de algumas bibliotecas de IA.
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# --- Carregamento de Chaves e Configura√ß√µes (Secrets) ---
# O Streamlit carrega o arquivo secrets.toml automaticamente para este objeto.
# Adicionamos verifica√ß√µes para garantir que as chaves essenciais est√£o presentes.

try:
    # Carrega a chave da API do Google AI (Gemini)
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]

    # Carrega o objeto de configura√ß√£o do Firebase
    FIREBASE_CONFIG = st.secrets["firebase_config"]
    
    # Carrega o objeto da conta de servi√ßo do Google Cloud
    GCP_SERVICE_ACCOUNT = st.secrets["gcp_service_account"]

except KeyError as e:
    st.error(f"Erro Cr√≠tico: A chave '{e}' n√£o foi encontrada no arquivo secrets.toml.")
    st.info("Por favor, verifique se o arquivo .streamlit/secrets.toml est√° completo e correto.")
    st.stop() # Interrompe a execu√ß√£o do app se uma chave essencial estiver faltando

st.success("Constantes e secrets carregados com sucesso!")
# ==============================================================================
# 3. FUN√á√ïES AUXILIARES GLOBAIS
# ==============================================================================

# Adicionado o st.cache_data para otimizar o carregamento da imagem.
# O Streamlit guardar√° o resultado em cache e n√£o precisar√° reler o arquivo do disco toda vez.
@st.cache_data
def convert_image_to_base64(image_name):
    """L√™ um arquivo de imagem e o converte para uma string Base64."""
    try:
        image_path = get_asset_path(image_name)
        if os.path.exists(image_path):
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode()
        else:
            # Mostra um aviso no app se a imagem n√£o for encontrada.
            st.warning(f"Arquivo de imagem n√£o encontrado: {image_path}")
            return None
    except Exception as e:
        # Mostra um erro no app se ocorrer outro problema.
        st.error(f"Erro ao converter a imagem '{image_name}': {e}")
        return None

st.success("Fun√ß√µes auxiliares carregadas com sucesso!")
# ==============================================================================
# 4. INICIALIZA√á√ÉO DE SERVI√áOS E AUTENTICA√á√ÉO
# ==============================================================================

@st.cache_resource
def initialize_firebase_services():
    """
    Inicializa e retorna os clientes do Firebase para autentica√ß√£o e banco de dados.
    Usa @st.cache_resource para garantir que a conex√£o seja estabelecida apenas uma vez.
    """
    try:
        # Carrega as credenciais do arquivo secrets.toml
        firebase_config = dict(st.secrets["firebase_config"])
        service_account_creds = dict(st.secrets["gcp_service_account"])

        # Inicializa o Pyrebase para autentica√ß√£o do lado do cliente (login, registro)
        firebase_client = pyrebase.initialize_app(firebase_config)
        pb_auth_client = firebase_client.auth()

        # Inicializa o Firebase Admin SDK para opera√ß√µes de backend (acesso ao Firestore)
        # A verifica√ß√£o "if not firebase_admin._apps" impede a reinicializa√ß√£o do app.
        if not firebase_admin._apps:
            cred = credentials.Certificate(service_account_creds)
            firebase_admin.initialize_app(cred)
        
        firestore_db_client = firebase_admin_firestore.client()
        
        return pb_auth_client, firestore_db_client

    except Exception as e:
        st.error(f"Erro cr√≠tico na inicializa√ß√£o do Firebase: {e}")
        st.info("Verifique se as se√ß√µes [firebase_config] e [gcp_service_account] est√£o corretas no seu arquivo secrets.toml.")
        st.stop()
        return None, None

# Inicializa os servi√ßos e os armazena em vari√°veis globais
pb_auth_client, firestore_db = initialize_firebase_services()

@st.cache_resource
def get_llm():
    """Inicializa e retorna o cliente do modelo de linguagem (Gemini)."""
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
        # Configura o LLM com a chave e uma temperatura para respostas criativas
        return ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.75)
    except Exception as e:
        st.error(f"Erro cr√≠tico ao inicializar a IA do Google: {e}")
        st.info("Verifique se a GOOGLE_API_KEY est√° correta no seu arquivo secrets.toml.")
        st.stop()
        return None

# Inicializa o LLM
llm = get_llm()

def get_current_user_status():
    """
    Verifica se existe uma sess√£o de usu√°rio v√°lida e atualiza o estado do aplicativo.
    Retorna o status de autentica√ß√£o e as informa√ß√µes b√°sicas do usu√°rio.
    """
    # Define uma chave √∫nica para os dados da sess√£o do usu√°rio
    session_key = f'{APP_KEY_SUFFIX}_user_session_data'
    
    # Verifica se os dados da sess√£o existem
    if 'user_session' in st.session_state and st.session_state.user_session:
        try:
            # Tenta usar o token da sess√£o para obter informa√ß√µes da conta.
            # Isso valida se o token ainda √© v√°lido.
            user_info = pb_auth_client.get_account_info(st.session_state.user_session['idToken'])
            
            # Se for bem-sucedido, extrai os dados do usu√°rio
            uid = user_info['users'][0]['localId']
            email = user_info['users'][0].get('email')
            
            # Atualiza o estado da sess√£o com os dados confirmados
            st.session_state.update({
                'user_is_authenticated': True,
                'user_uid': uid,
                'user_email': email
            })
            return True, uid, email
            
        except Exception:
            # Se o token for inv√°lido/expirado, limpa a sess√£o e desloga o usu√°rio.
            st.session_state.clear()
            return False, None, None
            
    return False, None, None

st.success("Servi√ßos de autentica√ß√£o e IA carregados com sucesso!")
# ==============================================================================
# 5. CLASSE PRINCIPAL DA APLICA√á√ÉO
# ==============================================================================
class MaxMarketingApp:
    def __init__(self, llm_instance, db_firestore_instance):
        """Inicializa a aplica√ß√£o com as conex√µes para a IA e o Banco de Dados."""
        self.llm = llm_instance
        self.db = db_firestore_instance

    # --- M√âTODO DE ONBOARDING E BRIEFING ESTRAT√âGICO ---
    def exibir_briefing_estrategico(self):
        """
        Exibe um formul√°rio para o usu√°rio preencher o DNA de marketing da sua empresa.
        Essas informa√ß√µes ser√£o o "prompt invertido" principal para todas as ferramentas.
        """
        st.header("üöÄ Briefing Estrat√©gico do MaxMarketing Total")
        st.markdown("Para que nossa IA crie campanhas e conte√∫dos que realmente vendem, precisamos entender a fundo o seu neg√≥cio. Suas respostas aqui servir√£o como base para todas as cria√ß√µes futuras.")
        
        # Vamos usar um dicion√°rio no session_state para guardar os dados do form
        if 'briefing_data' not in st.session_state:
            st.session_state.briefing_data = {}

        with st.form(key="briefing_form"):
            st.subheader("1. Identidade da Empresa")
            st.session_state.briefing_data['company_name'] = st.text_input("Nome da Empresa:", placeholder="Ex: Sapataria do Z√©")
            st.session_state.briefing_data['pitch'] = st.text_area("Descreva seu neg√≥cio em uma frase (seu pitch):", placeholder="Ex: Vendemos sapatos de couro artesanais para o p√∫blico masculino em Juiz de Fora.")
            st.session_state.briefing_data['personalidade'] = st.radio("Qual adjetivo melhor descreve a personalidade da sua marca?",
                                                                        ('Divertida e Jovem', 'S√©ria e Corporativa', 'Acolhedora e Amig√°vel', 'Sofisticada e Premium', 'T√©cnica e Especialista'))

            st.subheader("2. Produtos & Proposta de Valor")
            st.session_state.briefing_data['produtos'] = st.text_area("Liste seus 3 principais produtos ou servi√ßos:")
            st.session_state.briefing_data['diferencial'] = st.text_input("Qual √© o seu principal diferencial competitivo?", placeholder="Ex: Entrega mais r√°pida da cidade, √∫nico com garantia de 2 anos...")

            st.subheader("3. O Cliente Ideal (P√∫blico-Alvo)")
            st.session_state.briefing_data['cliente_ideal'] = st.text_area("Descreva seu cliente ideal:", placeholder="Homens de 30-50 anos, que valorizam qualidade e durabilidade...")
            st.session_state.briefing_data['dor_cliente'] = st.text_input("Qual a principal 'dor' ou necessidade do seu cliente que sua empresa resolve?")

            st.subheader("4. Objetivos de Marketing")
            st.session_state.briefing_data['objetivo_principal'] = st.radio("Qual √© o seu OBJETIVO N¬∫ 1 com marketing digital?",
                                                                            ('Aumentar seguidores e engajamento', 'Gerar mais leads (contatos)', 'Aumentar as vendas diretas', 'Fortalecer a marca'))

            submitted = st.form_submit_button("‚úÖ Salvar Briefing e Come√ßar a Criar!")
            if submitted:
                with st.spinner("Salvando o DNA de marketing da sua empresa..."):
                    try:
                        user_uid = st.session_state.get('user_uid')
                        if user_uid:
                            # Cria ou atualiza um documento com o ID da empresa do usu√°rio
                            company_ref = self.db.collection(COMPANY_COLLECTION).document(user_uid)
                            company_ref.set(st.session_state.briefing_data, merge=True) # merge=True permite atualizar sem apagar dados antigos
                            
                            # Marca no perfil do usu√°rio que o briefing foi conclu√≠do
                            user_ref = self.db.collection(USER_COLLECTION).document(user_uid)
                            user_ref.update({"briefing_completed": True})

                            st.success("Briefing salvo! Estamos prontos para decolar.")
                            time.sleep(2)
                            # Limpa os dados do formul√°rio da mem√≥ria da sess√£o
                            del st.session_state['briefing_data']
                            st.rerun()
                        else:
                            st.error("Erro: Usu√°rio n√£o autenticado. N√£o foi poss√≠vel salvar o briefing.")
                    except Exception as e:
                        st.error(f"Ocorreu um erro ao salvar o briefing: {e}")

    # --- PLACEHOLDERS PARA AS FUNCIONALIDADES ---
    
    # ==============================================================================
    # 6. FUNCIONALIDADES DO APP
    # ==============================================================================

    def exibir_criador_de_posts(self):
        """
        P√°gina para criar posts individuais para diversas plataformas.
        Implementa o conceito de "prompt invertido" para coletar detalhes do post.
        """
        st.header("‚úçÔ∏è Criador de Posts")
        st.markdown("Preencha o briefing abaixo para que o Max crie o post perfeito para voc√™.")

        # Carrega os prompts do nosso arquivo de configura√ß√£o JSON
        prompts = carregar_prompts_config()
        if not prompts:
            st.error("N√£o foi poss√≠vel carregar as configura√ß√µes de prompt.")
            return

        # Define as op√ß√µes de canais/plataformas
        canais_disponiveis = [
            'Instagram', 'Facebook', 'Google Ads (Pesquisa)', 
            'YouTube (Shorts)', 'TikTok', 'LinkedIn', 'Marketplace (OLX, etc.)'
        ]

        # Inicia o formul√°rio para evitar que a p√°gina recarregue a cada sele√ß√£o
        with st.form(key="post_briefing_form"):
            st.subheader("1. Defini√ß√µes do Post")
            
            # Sele√ß√£o de canal e tipo de post
            canal_selecionado = st.selectbox("Para qual canal √© este post?", options=canais_disponiveis)
            
            tipo_post = ""
            if canal_selecionado in ['Instagram', 'Facebook']:
                tipo_post = st.radio("Qual o formato?", ['Post de Feed (Imagem/Carrossel)', 'Reels', 'Stories'], horizontal=True)
            
            st.subheader("2. Conte√∫do e Objetivo (Prompt Invertido)")
            
            objetivo_post = st.text_input(
                "Qual o objetivo principal DESTE post?", 
                placeholder="Ex: Anunciar uma promo√ß√£o, gerar cliques no site, aumentar engajamento..."
            )
            produto_servico_foco = st.text_input(
                "Qual produto ou servi√ßo espec√≠fico voc√™ quer promover?",
                help="Seja espec√≠fico! Ex: 'Sapato de couro modelo Verona, cor marrom'."
            )
            mensagem_central = st.text_area(
                "Qual √© a mensagem central que voc√™ quer comunicar?",
                placeholder="Ex: Nossa promo√ß√£o de Dia dos Pais est√° com 50% de desconto em todos os sapatos."
            )
            cta_especifica = st.text_input(
                "Qual a Chamada para A√ß√£o (CTA)?",
                placeholder="Ex: 'Clique no link da bio', 'Comente EU QUERO', 'Visite nossa loja na Rua X'."
            )

            # Bot√£o para enviar o formul√°rio e gerar o conte√∫do
            submitted = st.form_submit_button("‚ú® Gerar Post com Max IA")

        # --- L√≥gica de Gera√ß√£o e Exibi√ß√£o do Resultado ---
        if submitted:
            with st.spinner("Aguarde... Max est√° combinando sua estrat√©gia com criatividade para gerar o post ideal! üöÄ"):
                try:
                    # Passo 1: Buscar o briefing geral da empresa que salvamos no Firestore
                    # (Vamos criar essa fun√ß√£o de busca depois, por enquanto √© um placeholder)
                    # company_data = buscar_dados_empresa_do_firestore(self.db, st.session_state.get('user_uid'))
                    
                    # Passo 2: Montar o prompt final para a IA
                    # (Aqui combinamos o briefing da empresa com o briefing espec√≠fico deste post)
                    # prompt_final = montar_prompt_para_post(
                    #     prompts, company_data, canal_selecionado, tipo_post, 
                    #     objetivo_post, produto_servico_foco, mensagem_central, cta_especifica
                    # )
                    
                    # Passo 3: Chamar a IA para gerar o conte√∫do
                    # (Usamos o 'llm' que inicializamos na Parte 4)
                    # resultado_ia = self.llm.invoke(prompt_final)
                    
                    # --- SIMULA√á√ÉO DO RESULTADO (para fins de desenvolvimento visual) ---
                    st.session_state['post_gerado'] = """
**T√≠tulo Impactante:** üëû Seu Pai Merece o Melhor. E o Melhor Est√° com 50% OFF!

**Texto do Post:**
O presente perfeito para o Dia dos Pais est√° aqui na Sapataria do Z√©! üéÅ

Toda a nossa linha de sapatos de couro artesanais, incluindo o nosso campe√£o de vendas Verona, est√° com um desconto incr√≠vel de 50%. Qualidade, conforto e durabilidade que seu pai vai sentir a cada passo.

N√£o deixe para a √∫ltima hora! A promo√ß√£o √© v√°lida somente at√© s√°bado.

**Sugest√£o de Imagem/V√≠deo:**
Um v√≠deo curto e elegante mostrando os detalhes do sapato de couro Verona, com foco na costura e no acabamento. O v√≠deo termina com o sapato sendo colocado em uma bela caixa de presente.

**Chamada para A√ß√£o (CTA):**
Visite nossa loja na Rua X e garanta o presente do seu paiz√£o!

**Hashtags Estrat√©gicas:**
#diadospais #presenteparaopai #sapatomasculino #sapatodecouro #juizdefora #promocao #modamasculina
                    """
                    # --- FIM DA SIMULA√á√ÉO ---

                except Exception as e:
                    st.error(f"Ocorreu um erro ao gerar o conte√∫do: {e}")

        # Se um post foi gerado, exibe na tela
        if 'post_gerado' in st.session_state and st.session_state.post_gerado:
            st.divider()
            st.subheader("‚úÖ Conte√∫do Gerado pelo Max:")
            st.markdown(st.session_state.post_gerado)

            st.subheader("Refinamento e A√ß√µes")
            col1, col2 = st.columns(2)
            with col1:
                st.button("Salvar no Hist√≥rico", type="primary")
            with col2:
                st.download_button("Baixar como .txt", st.session_state.post_gerado, file_name="post_max_marketing.txt")
            
            refinamento = st.text_input("Gostou? Pe√ßa um ajuste para o Max:", placeholder="Ex: 'Deixe o texto mais curto', 'Use mais emojis', 'Crie outra op√ß√£o de t√≠tulo'")
            if st.button("Refinar Texto"):
                # Aqui entraria a l√≥gica para refinar o texto, enviando um novo prompt para a IA
                st.info("Fun√ß√£o de refinamento em desenvolvimento.")

    def exibir_criador_de_campanhas(self):
        """
        P√°gina para criar campanhas de marketing completas, com m√∫ltiplos criativos
        para diversas plataformas, baseadas em um √∫nico objetivo estrat√©gico.
        """
        st.header("üì£ Criador de Campanhas Completas")
        st.markdown("Defina a estrat√©gia da sua campanha e deixe o Max criar todas as pe√ßas de comunica√ß√£o para voc√™ de forma integrada.")

        # Define as op√ß√µes de canais para a campanha
        canais_disponiveis = [
            'Instagram', 'Facebook', 'E-mail Marketing', 'Google Ads (Pesquisa)', 'WhatsApp'
        ]

        with st.form(key="campaign_briefing_form"):
            st.subheader("1. Estrat√©gia da Campanha")
            
            nome_campanha = st.text_input(
                "Qual o nome ou tema da sua campanha?", 
                placeholder="Ex: Lan√ßamento Cole√ß√£o de Inverno, Promo√ß√£o de Anivers√°rio da Loja"
            )
            
            objetivo_campanha = st.selectbox(
                "Qual o objetivo principal DESTA CAMPANHA?",
                options=[
                    'Gerar vendas de um produto/servi√ßo espec√≠fico',
                    'Aumentar o reconhecimento da marca (branding)',
                    'Capturar leads (e-mails, contatos de WhatsApp)',
                    'Promover um evento ou uma data especial'
                ]
            )
            
            oferta_central = st.text_area(
                "Qual √© a oferta principal ou mensagem-chave da campanha?",
                placeholder="Ex: 'Toda a linha de inverno com 20% de desconto e frete gr√°tis', 'Inscreva-se na nossa masterclass gratuita sobre marketing digital'."
            )
            
            st.subheader("2. Canais e Criativos")
            
            canais_selecionados = st.multiselect(
                "Em quais canais esta campanha ser√° veiculada?",
                options=canais_disponiveis,
                help="O Max ir√° gerar um pacote de conte√∫do apropriado para cada canal selecionado."
            )

            # Bot√£o para enviar o formul√°rio
            submitted = st.form_submit_button("üöÄ Gerar Pacote da Campanha")

        # --- L√≥gica de Gera√ß√£o e Exibi√ß√£o do Resultado ---
        if submitted:
            if not nome_campanha or not oferta_central or not canais_selecionados:
                st.warning("Por favor, preencha o nome, a oferta e selecione pelo menos um canal para a campanha.")
            else:
                with st.spinner(f"Orquestrando a campanha '{nome_campanha}'... O Max est√° preparando um pacote completo de criativos! üß†‚ú®"):
                    # Aqui entraria a l√≥gica complexa para montar o prompt,
                    # chamar a IA e salvar o resultado.
                    # Por enquanto, vamos simular o resultado para fins visuais.
                    
                    # --- SIMULA√á√ÉO DO RESULTADO ---
                    st.session_state['campanha_gerada'] = {
                        "nome": nome_campanha,
                        "objetivo": objetivo_campanha,
                        "oferta": oferta_central,
                        "pacote_criativos": """
### üì£ Pacote para Instagram
**Post para Feed (Sugest√£o 1):**
- **Texto:** Prepare-se para o inverno com estilo! ‚ùÑÔ∏è Nossa nova cole√ß√£o acaba de chegar com 20% de DESCONTO e frete gr√°tis. Jaquetas, botas e tudo que voc√™ precisa para ficar aquecido e elegante. Toque no link da bio para conferir!
- **Imagem:** Um carrossel de fotos com modelos vestindo as pe√ßas da nova cole√ß√£o em um cen√°rio de inverno.

**Ideia para Stories (Sequ√™ncia de 3):**
1.  **Story 1 (Enquete):** Foto de duas pe√ßas da cole√ß√£o. "Qual combina mais com voc√™? ü§î"
2.  **Story 2 (V√≠deo):** V√≠deo curto mostrando os detalhes de uma jaqueta. Texto sobreposto: "Qualidade nos m√≠nimos detalhes."
3.  **Story 3 (CTA):** Print da p√°gina da promo√ß√£o no site. Sticker de "Clique Aqui" com o link direto.

---
### üì£ Pacote para E-mail Marketing
**Assunto:** ‚ùÑÔ∏è Chegou o Inverno! E sua nova cole√ß√£o favorita tamb√©m (com 20% OFF).
**Corpo do E-mail:**
Ol√° [Nome do Cliente],

O frio chegou e com ele a oportunidade de renovar seu guarda-roupa com pe√ßas incr√≠veis.

Nossa Nova Cole√ß√£o de Inverno foi pensada para quem n√£o abre m√£o de estilo e conforto. E para celebrar, estamos oferecendo **20% de desconto em todas as pe√ßas + frete gr√°tis** por tempo limitado.

[Bot√£o: Ver a Cole√ß√£o Agora]

N√£o perca essa chance de se aquecer com eleg√¢ncia.

Abra√ßos,
Equipe MaxMarketing Total
"""
                    }
                    # --- FIM DA SIMULA√á√ÉO ---

        # Se uma campanha foi gerada, exibe na tela
        if 'campanha_gerada' in st.session_state:
            st.divider()
            st.subheader(f"‚úÖ Pacote de Criativos para a Campanha: '{st.session_state['campanha_gerada']['nome']}'")
            
            # Usamos um expander para n√£o poluir a tela, o usu√°rio abre se quiser ver os detalhes
            with st.expander("Ver pacote de criativos gerados", expanded=True):
                st.markdown(st.session_state['campanha_gerada']['pacote_criativos'])

            col1, col2 = st.columns(2)
            with col1:
                st.button("Salvar Campanha no Hist√≥rico", type="primary")
            with col2:
                st.download_button(
                    "Baixar como .txt", 
                    st.session_state['campanha_gerada']['pacote_criativos'], 
                    file_name=f"campanha_{st.session_state['campanha_gerada']['nome']}.txt"
                )

    def exibir_construtor_de_ofertas(self):
        st.header("üõçÔ∏è Construtor de Ofertas")
        st.markdown("Crie um cat√°logo visual com suas principais ofertas e produtos. Salve seu progresso e depois baixe como um PDF profissional ou compartilhe nas redes.")
        st.markdown("---")

        # <<< MUDAN√áA: Carrega o cat√°logo do Firestore ou inicializa um novo
        if 'catalogo_ofertas' not in st.session_state:
            # st.session_state.catalogo_ofertas = self.carregar_catalogo_do_firestore()
            # SIMULA√á√ÉO: Enquanto a fun√ß√£o de carregar n√£o est√° pronta, inicializamos um vazio
            st.session_state.catalogo_ofertas = {
                'theme_color': 'Roxo Inova√ß√£o', 'theme_font': 'Montserrat', 'logo_b64': None,
                'header_pitch': 'Confira nossas ofertas especiais!', 'whatsapp': '',
                'ofertas': [], 'footer_text': f"¬© {datetime.date.today().year} Sua Empresa"
            }
        
        state = st.session_state.catalogo_ofertas

        # --- Layout de duas colunas ---
        col1, col2 = st.columns([1, 1.2])

        # --- COLUNA 1: Painel de Controle ---
        with col1:
            st.subheader("Painel de Controle üéõÔ∏è")

            with st.expander("1. Design do Cat√°logo", expanded=True):
                state['theme_color'] = st.selectbox("Paleta de Cores", ["Roxo Inova√ß√£o", "Azul Moderno", "Verde Crescimento", "Cinza Corporativo"])
                state['theme_font'] = st.selectbox("Fonte", ["Montserrat", "Poppins", "Roboto", "Lato"])
                uploaded_logo = st.file_uploader("Sua Logomarca (PNG, JPG)", type=['png', 'jpg'])
                if uploaded_logo:
                    state['logo_b64'] = base64.b64encode(uploaded_logo.getvalue()).decode()

            with st.expander("2. T√≠tulos e Contato", expanded=True):
                state['header_pitch'] = st.text_area("T√≠tulo Principal do Cat√°logo", value=state['header_pitch'])
                state['whatsapp'] = st.text_input("N¬∫ WhatsApp para Contato (Opcional)", value=state['whatsapp'], placeholder="Ex: 5532912345678")
                state['footer_text'] = st.text_input("Texto do Rodap√©", value=state['footer_text'])

            with st.expander("3. Adicionar Ofertas (at√© 18)", expanded=True):
                with st.form("offer_form", clear_on_submit=True):
                    st.write("**Adicionar nova oferta/produto**")
                    offer_name = st.text_input("Nome da Oferta")
                    offer_photo = st.file_uploader("Foto da Oferta", type=['png', 'jpg'])
                    offer_desc = st.text_area("Descri√ß√£o (Pre√ßo, detalhes, etc.)")
                    submitted = st.form_submit_button("Adicionar Oferta ao Cat√°logo")
                    
                    if submitted and offer_name and offer_photo and offer_desc:
                        if len(state['ofertas']) < 18:
                            photo_b64 = base64.b64encode(offer_photo.getvalue()).decode()
                            state['ofertas'].append({'name': offer_name, 'photo_b64': photo_b64, 'desc': offer_desc})
                            st.success(f"Oferta '{offer_name}' adicionada!")
                        else:
                            st.warning("Limite de 18 ofertas atingido.")
                
                if state['ofertas']:
                    st.write("**Ofertas Adicionadas:**")
                    for i, offer in enumerate(state['ofertas']):
                        c1, c2 = st.columns([3, 1])
                        c1.write(f"_{offer['name']}_")
                        if c2.button("Remover", key=f"del_offer_{i}", use_container_width=True):
                            state['ofertas'].pop(i)
                            st.rerun()

            # <<< MUDAN√áA: Bot√£o para salvar o progresso no Firestore
            if st.button("üíæ Salvar Cat√°logo", type="primary", use_container_width=True):
                with st.spinner("Salvando seu cat√°logo no banco de dados..."):
                    # self.salvar_catalogo_no_firestore(state)
                    time.sleep(1) # Simula√ß√£o
                    st.success("Cat√°logo salvo com sucesso!")

        # --- COLUNA 2: Pr√©-visualiza√ß√£o e Download ---
        with col2:
            st.subheader("Pr√©-visualiza√ß√£o do Cat√°logo üìÑ")

            color_map = {
                'Roxo Inova√ß√£o': {'primary': (124, 58, 237), 'secondary': (243, 232, 255), 'text': (88, 28, 135), 'bg': '#faf5ff'},
                'Azul Moderno': {'primary': (37, 99, 235), 'secondary': (219, 234, 254), 'text': (30, 64, 175), 'bg': '#eff6ff'},
                'Verde Crescimento': {'primary': (22, 163, 74), 'secondary': (220, 252, 231), 'text': (20, 83, 45), 'bg': '#f0fdf4'},
                'Cinza Corporativo': {'primary': (71, 85, 105), 'secondary': (226, 232, 240), 'text': (30, 41, 59), 'bg': '#f8fafc'},
            }
            font_family = state['theme_font']
            colors = color_map[state['theme_color']]

            # L√≥gica para pagina√ß√£o na pr√©-visualiza√ß√£o
            total_ofertas = len(state['ofertas'])
            page_size = 6
            total_pages = (total_ofertas + page_size - 1) // page_size if total_ofertas > 0 else 1
            
            page_num = st.number_input('Ver P√°gina', min_value=1, max_value=total_pages, value=1, step=1) if total_pages > 1 else 1
            start_index = (page_num - 1) * page_size
            end_index = start_index + page_size
            ofertas_para_exibir = state['ofertas'][start_index:end_index]
            
            # Montando o HTML para o st.markdown
            # ... (O c√≥digo HTML e a classe PDF FPDF s√£o praticamente os mesmos do MaxConstrutor,
            #    apenas trocando 'product' por 'offer' e ajustando os campos conforme necess√°rio)
            # Para manter a resposta focada, omiti a repeti√ß√£o do HTML e da classe PDF,
            # pois a estrutura √© id√™ntica. Voc√™ pode copiar e colar do seu c√≥digo original.

            if st.download_button(
                label="üì• Baixar Cat√°logo em PDF", data=b"simulacao_pdf", file_name="meu_catalogo_de_ofertas.pdf",
                mime="application/pdf", use_container_width=True
            ):
                # A l√≥gica real de gera√ß√£o de PDF seria chamada aqui
                pass

   def exibir_estrategista_de_midia(self):
        """
        P√°gina com um conjunto de ferramentas para an√°lise e planejamento de m√≠dia paga e org√¢nica,
        incluindo GEO (Generative Engine Optimization) e otimiza√ß√£o de an√∫ncios.
        """
        st.header("üìä Estrategista de M√≠dia Digital")
        st.markdown("Analise sua presen√ßa online, planeje seus investimentos em an√∫ncios e otimize seus criativos com o poder da IA.")

        # Cria√ß√£o das abas para organizar as ferramentas
        tab1, tab2, tab3 = st.tabs(["üìà Plano de M√≠dia", "üåê An√°lise GEO", "‚úçÔ∏è Otimizador de An√∫ncios"])

        # --- Aba 1: Plano de M√≠dia (Adaptado do seu Estrategista) ---
        with tab1:
            st.subheader("Planejador de Or√ßamento e Canais")
            st.write("Defina seu objetivo e or√ßamento para receber uma recomenda√ß√£o estrat√©gica de investimento.")

            with st.form("media_plan_form"):
                objetivo = st.selectbox(
                    "Qual o principal objetivo do seu investimento?",
                    ["Aumentar as vendas online", "Levar mais clientes √† loja f√≠sica", "Gerar mais contatos (leads)", "Fortalecer a marca"]
                )
                orcamento = st.number_input("Qual o seu or√ßamento total de m√≠dia (R$)?", min_value=100, value=500, step=100)
                duracao = st.slider("A campanha durar√° quantos dias?", 7, 90, 15)
                
                submitted = st.form_submit_button("üß† Montar Plano de M√≠dia")
                if submitted:
                    with st.spinner("Max est√° analisando os melhores canais para o seu objetivo e or√ßamento..."):
                        # L√≥gica para chamar a IA e gerar um plano de m√≠dia.
                        # SIMULA√á√ÉO:
                        st.session_state['media_plan_result'] = f"""
                        #### üéØ Plano de A√ß√£o para '{objetivo}'

                        Com um or√ßamento de **R$ {orcamento:.2f}** para **{duracao} dias** (aprox. R$ {orcamento/duracao:.2f}/dia), esta √© a minha recomenda√ß√£o estrat√©gica:

                        **1. Aloca√ß√£o de Or√ßamento:**
                        * **60% (R$ {orcamento*0.6:.2f}) em Meta Ads (Instagram/Facebook):** Ideal para segmenta√ß√£o precisa do seu p√∫blico local e para gerar desejo com criativos visuais. Foco em an√∫ncios de tr√°fego e convers√£o.
                        * **40% (R$ {orcamento*0.4:.2f}) em Google Ads (Rede de Pesquisa):** Essencial para capturar a demanda de pessoas que j√° est√£o procurando ativamente pelo seu produto/servi√ßo.

                        **2. Foco do P√∫blico-Alvo:**
                        * **Meta Ads:** Criar um p√∫blico de 'Interesses' baseado no seu briefing e um p√∫blico de 'Remarketing' para re-impactar quem visitou seu site ou perfil.
                        * **Google Ads:** Focar em palavras-chave de 'cauda longa' e com inten√ß√£o de compra, como "melhor [seu produto] em [sua cidade]".

                        **3. Pr√≥ximo Passo Sugerido:**
                        * Use o **Otimizador de An√∫ncios** (na pr√≥xima aba) para criar os textos e headlines para esta campanha.
                        """
            
            if 'media_plan_result' in st.session_state:
                st.markdown("---")
                st.subheader("‚úÖ Seu Plano de M√≠dia Estrat√©gico:")
                st.markdown(st.session_state['media_plan_result'], unsafe_allow_html=True)


        # --- Aba 2: An√°lise GEO (Nova funcionalidade) ---
        with tab2:
            st.subheader("Analisador de Presen√ßa Local (GEO)")
            st.write("Otimize seu conte√∫do para ser encontrado por IAs e mecanismos de busca quando clientes locais procurarem por voc√™.")

            with st.form("geo_analysis_form"):
                st.write("Vamos analisar e otimizar sua principal p√°gina de servi√ßo.")
                url_pagina = st.text_input("Cole a URL da sua principal p√°gina de produto/servi√ßo:", placeholder="https://seusite.com.br/servico-principal")
                
                submitted_geo = st.form_submit_button("üîç Analisar para GEO")
                if submitted_geo and url_pagina:
                    with st.spinner("Max est√° lendo sua p√°gina e identificando pontos de otimiza√ß√£o para GEO..."):
                        # L√≥gica para a IA analisar a URL
                        # SIMULA√á√ÉO:
                        st.session_state['geo_result'] = """
                        #### ‚úÖ An√°lise GEO da sua p√°gina:

                        **Pontos Fortes:**
                        * O t√≠tulo da p√°gina menciona seu servi√ßo principal.
                        * As imagens t√™m texto alternativo, o que ajuda na acessibilidade.

                        **Oportunidades de Melhoria para IAs:**
                        1.  **Crie uma se√ß√£o de FAQ:** Responda diretamente √†s 5 perguntas mais comuns sobre seu servi√ßo. IAs adoram o formato de Pergunta e Resposta. Sugest√£o de pergunta: "Qual o pre√ßo do [seu servi√ßo]?"
                        2.  **Adicione Dados Estruturados:** Inclua o endere√ßo e o telefone da sua empresa de forma clara e expl√≠cita no rodap√© da p√°gina.
                        3.  **Use T√≥picos Locais:** Adicione um par√°grafo sobre a hist√≥ria da sua empresa na sua cidade ou como seu servi√ßo atende especificamente √† comunidade local.
                        """

            if 'geo_result' in st.session_state:
                st.markdown("---")
                st.subheader("üí° Recomenda√ß√µes de Otimiza√ß√£o GEO:")
                st.markdown(st.session_state['geo_result'])

        # --- Aba 3: Otimizador de An√∫ncios (Adaptado do seu Especialista Google) ---
        with tab3:
            st.subheader("Criador e Otimizador de An√∫ncios para Google")
            st.write("Crie rapidamente os textos para seus an√∫ncios na Rede de Pesquisa do Google.")

            with st.form("ads_creator_form"):
                termo_busca = st.text_input("O que seu cliente ideal digitaria no Google para te achar?", placeholder="Ex: Sapataria artesanal em Juiz de Fora")
                
                submitted_ads = st.form_submit_button("‚úçÔ∏è Gerar Textos do An√∫ncio")
                if submitted_ads and termo_busca:
                    with st.spinner("Max est√° criando headlines e descri√ß√µes de alta convers√£o..."):
                        # L√≥gica para chamar a IA e gerar os an√∫ncios
                        # SIMULA√á√ÉO:
                        st.session_state['ads_result'] = f"""
                        #### ‚úÖ Textos para An√∫ncios de Pesquisa:

                        **Sugest√£o de Palavras-Chave:**
                        * `{termo_busca}`
                        * `loja de sapatos artesanais juiz de fora`
                        * `onde comprar sapato de couro em jf`

                        ---
                        **Op√ß√£o de An√∫ncio 1 (Foco em Qualidade):**
                        * **T√≠tulo 1:** Sapatos Artesanais em Juiz de Fora
                        * **T√≠tulo 2:** Couro Leg√≠timo e Durabilidade
                        * **T√≠tulo 3:** Qualidade em Cada Detalhe
                        * **Descri√ß√£o:** Conhe√ßa nossa cole√ß√£o exclusiva de sapatos feitos √† m√£o. Conforto e estilo que duram. Visite nossa loja no centro!

                        **Op√ß√£o de An√∫ncio 2 (Foco em Exclusividade):**
                        * **T√≠tulo 1:** {termo_busca.title()}
                        * **T√≠tulo 2:** Modelos √önicos e Exclusivos
                        * **T√≠tulo 3:** Atendimento Personalizado
                        * **Descri√ß√£o:** Cansado do mesmo? Encontre sapatos com personalidade e design autoral. Estoque limitado. Garanta j√° o seu par!
                        """

            if 'ads_result' in st.session_state:
                st.markdown("---")
                st.subheader("üìù Seus An√∫ncios para o Google:")
                st.markdown(st.session_state['ads_result'])
